# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: python:buster

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts. 
# This can be an array or a multi-line string.
cache:
  paths:
    - .cache/pip
    - venv

before_script:
  - python -V               # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

#pages is a special job that is used to upload static content to GitLab that can be used to serve your website
#in this case the developer portal
pages:
  script:
  - pip install -r requirements.txt
  - make html SPHINXOPTS="-W --keep-going"
  - ls build/html
  - mkdir .public
  - cp -r build/html/* .public
  - rm -rf public/$CI_COMMIT_REF_SLUG
  - mkdir .public/$CI_COMMIT_REF_SLUG
  - cp -r build/html/* .public/$CI_COMMIT_REF_SLUG
  - mkdir -p public # create folder if not exists (if cache is deleted)
  - cp -r .public/* public/
  artifacts:
    name: "$CI_COMMIT_REF_SLUG"
    paths:
    - public
    expire_in: 1 week
 # only:
 # - master

deploy_staging:
  stage: deploy
  script:
    - echo "Deploy to staging server"
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      
deploy_review:
  stage: deploy
  script:
    - echo "Deploy a review app"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://ska-telescope.gitlab.io/developer.skatelescope.org/$CI_COMMIT_REF_SLUG/
  rules:
    - if: $CI_MERGE_REQUEST_ID
      
stop_review:
  stage: deploy
  script:
    - echo "Stopping review/$CI_COMMIT_REF_SLUG environment"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true # needed to not block pipeline

# Create Gitlab CI badges from CI metrics
# https://developer.skao.int/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
